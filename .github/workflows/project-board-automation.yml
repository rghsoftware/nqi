name: Project Board Automation

on:
  issues:
    types: [opened]
  pull_request:
    types: [opened, closed]

env:
  PROJECT_NUMBER: 6
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  update-project-board:
    runs-on: ubuntu-latest
    steps:
      - name: Add issue to Idea Greenhouse
        if: github.event_name == 'issues' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            // Get project ID
            const query = `
              query {
                user(login: "${context.repo.owner}") {
                  projectV2(number: ${process.env.PROJECT_NUMBER}) {
                    id
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            const result = await github.graphql(query);
            const project = result.user.projectV2;

            if (!project) {
              console.log('Project not found');
              return;
            }

            // Add item to project
            const addItemMutation = `
              mutation {
                addProjectV2ItemById(input: {
                  projectId: "${project.id}"
                  contentId: "${context.payload.issue.node_id}"
                }) {
                  item {
                    id
                  }
                }
              }
            `;

            const addResult = await github.graphql(addItemMutation);
            const itemId = addResult.addProjectV2ItemById.item.id;

            // Find "Status" field and "Idea Greenhouse" option
            const statusField = project.fields.nodes.find(field => field.name === 'Status');
            if (statusField) {
              const ideaGreenhouseOption = statusField.options?.find(option => option.name === 'Idea Greenhouse');

              if (ideaGreenhouseOption) {
                const updateMutation = `
                  mutation {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: "${project.id}"
                      itemId: "${itemId}"
                      fieldId: "${statusField.id}"
                      value: {
                        singleSelectOptionId: "${ideaGreenhouseOption.id}"
                      }
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `;

                await github.graphql(updateMutation);
                console.log('Issue added to Idea Greenhouse');
              }
            }

      - name: Add PR to In Review
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            // Similar logic as above but for "In Review" status
            const query = `
              query {
                user(login: "${context.repo.owner}") {
                  projectV2(number: ${process.env.PROJECT_NUMBER}) {
                    id
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            const result = await github.graphql(query);
            const project = result.user.projectV2;

            if (!project) {
              console.log('Project not found');
              return;
            }

            const addItemMutation = `
              mutation {
                addProjectV2ItemById(input: {
                  projectId: "${project.id}"
                  contentId: "${context.payload.pull_request.node_id}"
                }) {
                  item {
                    id
                  }
                }
              }
            `;

            const addResult = await github.graphql(addItemMutation);
            const itemId = addResult.addProjectV2ItemById.item.id;

            const statusField = project.fields.nodes.find(field => field.name === 'Status');
            if (statusField) {
              const inReviewOption = statusField.options?.find(option => option.name === 'In Review');

              if (inReviewOption) {
                const updateMutation = `
                  mutation {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: "${project.id}"
                      itemId: "${itemId}"
                      fieldId: "${statusField.id}"
                      value: {
                        singleSelectOptionId: "${inReviewOption.id}"
                      }
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `;

                await github.graphql(updateMutation);
                console.log('PR added to In Review');
              }
            }

      - name: Move merged PR to Done
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: actions/github-script@v7
        with:
          script: |
            // Find the PR item in the project and move it to Done
            const query = `
              query {
                user(login: "${context.repo.owner}") {
                  projectV2(number: ${process.env.PROJECT_NUMBER}) {
                    id
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on PullRequest {
                            id
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            const result = await github.graphql(query);
            const project = result.user.projectV2;

            if (!project) {
              console.log('Project not found');
              return;
            }

            // Find the PR item
            const prItem = project.items.nodes.find(item =>
              item.content && item.content.number === context.payload.pull_request.number
            );

            if (!prItem) {
              console.log('PR not found in project');
              return;
            }

            const statusField = project.fields.nodes.find(field => field.name === 'Status');
            if (statusField) {
              const doneOption = statusField.options?.find(option => option.name === 'Done');

              if (doneOption) {
                const updateMutation = `
                  mutation {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: "${project.id}"
                      itemId: "${prItem.id}"
                      fieldId: "${statusField.id}"
                      value: {
                        singleSelectOptionId: "${doneOption.id}"
                      }
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `;

                await github.graphql(updateMutation);
                console.log('PR moved to Done');
              }
            }
