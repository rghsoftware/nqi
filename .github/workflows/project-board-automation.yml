name: Project Board Automation

on:
  issues:
    types: [opened]
  pull_request:
    types: [opened, closed]

env:
  # Update these with your actual values
  PROJECT_NUMBER: 6
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  debug-context:
    runs-on: ubuntu-latest
    steps:
      - name: Debug GitHub context
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Repository owner:', context.repo.owner);
            console.log('Repository name:', context.repo.repo);
            console.log('Actor:', context.actor);
            console.log('Event name:', context.eventName);
            console.log('Project number:', process.env.PROJECT_NUMBER);

  update-project-board:
    runs-on: ubuntu-latest
    steps:
      - name: Find and update project
        uses: actions/github-script@v7
        with:
          script: |
            const projectNumber = parseInt(process.env.PROJECT_NUMBER);

            // Function to find project in different locations
            async function findProject() {
              // Try 1: Repository project
              try {
                console.log('Trying repository project...');
                const repoQuery = `
                  query {
                    repository(owner: "${context.repo.owner}", name: "${context.repo.repo}") {
                      projectV2(number: ${projectNumber}) {
                        id
                        title
                        fields(first: 20) {
                          nodes {
                            ... on ProjectV2Field {
                              id
                              name
                            }
                            ... on ProjectV2SingleSelectField {
                              id
                              name
                              options {
                                id
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                `;

                const repoResult = await github.graphql(repoQuery);
                if (repoResult.repository.projectV2) {
                  console.log('Found repository project');
                  return { project: repoResult.repository.projectV2, type: 'repository' };
                }
              } catch (error) {
                console.log('Repository project not found:', error.message);
              }

              // Try 2: User project
              try {
                console.log('Trying user project...');
                const userQuery = `
                  query {
                    user(login: "${context.repo.owner}") {
                      projectV2(number: ${projectNumber}) {
                        id
                        title
                        fields(first: 20) {
                          nodes {
                            ... on ProjectV2Field {
                              id
                              name
                            }
                            ... on ProjectV2SingleSelectField {
                              id
                              name
                              options {
                                id
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                `;

                const userResult = await github.graphql(userQuery);
                if (userResult.user && userResult.user.projectV2) {
                  console.log('Found user project');
                  return { project: userResult.user.projectV2, type: 'user' };
                }
              } catch (error) {
                console.log('User project not found:', error.message);
              }

              // Try 3: Organization project
              try {
                console.log('Trying organization project...');
                const orgQuery = `
                  query {
                    organization(login: "${context.repo.owner}") {
                      projectV2(number: ${projectNumber}) {
                        id
                        title
                        fields(first: 20) {
                          nodes {
                            ... on ProjectV2Field {
                              id
                              name
                            }
                            ... on ProjectV2SingleSelectField {
                              id
                              name
                              options {
                                id
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                `;

                const orgResult = await github.graphql(orgQuery);
                if (orgResult.organization && orgResult.organization.projectV2) {
                  console.log('Found organization project');
                  return { project: orgResult.organization.projectV2, type: 'organization' };
                }
              } catch (error) {
                console.log('Organization project not found:', error.message);
              }

              throw new Error(`Project ${projectNumber} not found in repository, user, or organization`);
            }

            // Function to add item to project
            async function addItemToProject(project, contentId, statusName) {
              try {
                // Add item to project
                const addItemMutation = `
                  mutation {
                    addProjectV2ItemById(input: {
                      projectId: "${project.id}"
                      contentId: "${contentId}"
                    }) {
                      item {
                        id
                      }
                    }
                  }
                `;

                const addResult = await github.graphql(addItemMutation);
                const itemId = addResult.addProjectV2ItemById.item.id;
                console.log('Item added to project with ID:', itemId);

                // Find status field and set status
                const statusField = project.fields.nodes.find(field =>
                  field.name === 'Status' || field.name === 'status'
                );

                if (statusField && statusField.options) {
                  const statusOption = statusField.options.find(option =>
                    option.name === statusName
                  );

                  if (statusOption) {
                    const updateMutation = `
                      mutation {
                        updateProjectV2ItemFieldValue(input: {
                          projectId: "${project.id}"
                          itemId: "${itemId}"
                          fieldId: "${statusField.id}"
                          value: {
                            singleSelectOptionId: "${statusOption.id}"
                          }
                        }) {
                          projectV2Item {
                            id
                          }
                        }
                      }
                    `;

                    await github.graphql(updateMutation);
                    console.log(`Item moved to ${statusName}`);
                  } else {
                    console.log(`Status option "${statusName}" not found. Available options:`,
                      statusField.options.map(opt => opt.name));
                  }
                } else {
                  console.log('Status field not found. Available fields:',
                    project.fields.nodes.map(field => field.name));
                }

                return itemId;
              } catch (error) {
                console.error('Error adding item to project:', error);
                throw error;
              }
            }

            // Function to move existing item
            async function moveItemInProject(project, contentNumber, statusName, contentType) {
              try {
                // Find the item in the project
                const itemsQuery = `
                  query {
                    node(id: "${project.id}") {
                      ... on ProjectV2 {
                        items(first: 100) {
                          nodes {
                            id
                            content {
                              ... on Issue {
                                number
                              }
                              ... on PullRequest {
                                number
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                `;

                const itemsResult = await github.graphql(itemsQuery);
                const projectItems = itemsResult.node.items.nodes;

                const targetItem = projectItems.find(item =>
                  item.content && item.content.number === contentNumber
                );

                if (!targetItem) {
                  console.log(`${contentType} #${contentNumber} not found in project`);
                  return;
                }

                // Find status field and update
                const statusField = project.fields.nodes.find(field =>
                  field.name === 'Status' || field.name === 'status'
                );

                if (statusField && statusField.options) {
                  const statusOption = statusField.options.find(option =>
                    option.name === statusName
                  );

                  if (statusOption) {
                    const updateMutation = `
                      mutation {
                        updateProjectV2ItemFieldValue(input: {
                          projectId: "${project.id}"
                          itemId: "${targetItem.id}"
                          fieldId: "${statusField.id}"
                          value: {
                            singleSelectOptionId: "${statusOption.id}"
                          }
                        }) {
                          projectV2Item {
                            id
                          }
                        }
                      }
                    `;

                    await github.graphql(updateMutation);
                    console.log(`${contentType} moved to ${statusName}`);
                  }
                }
              } catch (error) {
                console.error('Error moving item:', error);
                throw error;
              }
            }

            // Main logic
            try {
              const { project, type } = await findProject();
              console.log(`Using ${type} project: ${project.title}`);

              if (github.event_name === 'issues' && github.event.action === 'opened') {
                await addItemToProject(
                  project,
                  context.payload.issue.node_id,
                  'Idea Greenhouse'
                );
              } else if (github.event_name === 'pull_request' && github.event.action === 'opened') {
                await addItemToProject(
                  project,
                  context.payload.pull_request.node_id,
                  'In Review'
                );
              } else if (github.event_name === 'pull_request' &&
                         github.event.action === 'closed' &&
                         github.event.pull_request.merged === true) {
                await moveItemInProject(
                  project,
                  context.payload.pull_request.number,
                  'Done',
                  'Pull Request'
                );
              }

            } catch (error) {
              console.error('Workflow failed:', error);
              // Don't fail the workflow, just log the error
              console.log('Project automation failed, but continuing workflow');
            }
