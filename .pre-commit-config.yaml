default_install_hook_types: [pre-commit, commit-msg]
default_stages: [pre-commit]

repos:
  # Python Backend Checks - using uv run
  - repo: local
    hooks:
      - id: backend-ruff-format
        name: Format Python code with Ruff
        entry: bash -c 'cd backend && uv run ruff format .'
        language: system
        files: ^backend/.*\.py$
        pass_filenames: false

      - id: backend-ruff-lint
        name: Lint Python code with Ruff
        entry: bash -c 'cd backend && uv run ruff check . --fix'
        language: system
        files: ^backend/.*\.py$
        pass_filenames: false

      - id: backend-mypy
        name: Type check Python code
        entry: bash -c 'cd backend && uv run mypy app/'
        language: system
        files: ^backend/.*\.py$
        pass_filenames: false

  # Flutter/Dart Frontend Checks
  - repo: local
    hooks:
      - id: dart-format
        name: Format Dart code
        entry: bash -c 'cd frontend && dart format --set-exit-if-changed lib/ test/'
        language: system
        files: ^frontend/.*\.dart$
        pass_filenames: false

      - id: flutter-analyze
        name: Analyze Flutter code
        entry: bash -c 'cd frontend && flutter analyze'
        language: system
        files: ^frontend/.*\.dart$
        pass_filenames: false

  # General checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-case-conflict
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-merge-conflict
      - id: no-commit-to-branch
        args: [--branch, main, --branch, master]

  # Docker
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: Lint Dockerfiles
        files: Dockerfile$

  # Security
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        args: [--baseline, .secrets.baseline]
        exclude: .*\.lock$|package-lock\.json$

  # Commit message validation
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.4.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]
        args: [--strict]

  # Branch name validation
  - repo: local
    hooks:
      - id: branch-name-check
        language: system
        pass_filenames: false
        always_run: true
        name: Check branch naming convention
        entry: bash
        args:
          - -c
          - |
            branch=$(git rev-parse --abbrev-ref HEAD)
            valid_pattern="^(main|develop|feature|bugfix|hotfix)/[a-z0-9-]+$"
            if [[ ! "$branch" =~ $valid_pattern ]] && [[ "$branch" != "main" ]] && [[ "$branch" != "develop" ]]; then
              echo "Branch name '$branch' does not follow naming convention."
              echo "Use: feature/description, bugfix/description, or hotfix/description"
              exit 1
            fi
